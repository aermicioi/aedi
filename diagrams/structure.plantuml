/**
@startuml
class "ObjectStorage" {
+ Object[char[]] function () contents;
+ int function (int delegate (Object)) opApply;
+ int function (int delegate (char[],Object)) opApply;
}
interface "Locator" {
+ Object function (char[]) get;
+ bool function (char[]) has;
}
class "FactoryMethodBasedFactory" {
}
class "AediException" {
}
class "InProgressException" {
}
interface "Taggable" {
+ Taggable function (char[]) tag;
+ Taggable function (char[]) untag;
+ char[][] function () tags;
}
interface "Container" {
+ Container function () instantiate;
}
class "FieldConfigurer" {
}
interface "AliasAware" {
+ AliasAware function (char[],char[]) link;
+ AliasAware function (char[]) unlink;
+ char[] function (char[]) resolve;
}
class "InvalidCastException" {
}
class "ParameterHolder" {
+ Tuple function () args;
}
class "LocatorReference" {
+ char[] function () id;
+ LocatorReference function (char[]) id;
}
interface "AggregateLocator" {
+ Locator function (char[]) getLocator;
+ bool function (char[]) hasLocator;
}
class "SwitchableContainer" {
+ SwitchableContainer function (SingletonContainer) container;
+ SingletonContainer function () container;
}
class "SingletonContainer" {
}
interface "ParentAware" {
+ ParentAware function (Object) parent;
+ Object function () parent;
+ ParentAware function () ancestor;
}
interface "Factory" {
+ Object function () factory;
+ TypeInfo function () type;
}
interface "ConfigurableContainer" {
}
class "MethodConfigurer" {
}
class "CallbackFactory" {
}
class "ExceptionChainingFactory" {
+ ExceptionChainingFactory function (char[]) id;
+ char[] function () id;
+ ExceptionChainingFactory function (Factory) decorated;
+ Factory function () decorated;
}
class "Exception" {
}
class "TaggableFactoryDecorator" {
+ TaggableFactoryDecorator function (Factory) decorated;
+ Factory function () decorated;
}
class "ApplicationContainer" {
}
class "Object" {
+ char[] function () toString;
+ ulong function () toHash;
+ int function (Object) opCmp;
+ bool function (Object) opEquals;
+ Object function (char[]) factory;
}
class "CircularReferenceException" {
+ CircularReferenceException function (char[]) add;
}
class "Throwable" {
+ char[] msg;
+ char[] file;
+ ulong line;
+ TraceInfo info;
+ Throwable next;
}
class "GenericFactoryImpl" {
}
interface "Switchable" {
+ bool function () enabled;
+ Switchable function (bool) enabled;
}
class "DelegatingLocatorImpl" {
}
class "NotFoundException" {
}
interface "GenericFactory" {
+ GenericFactory function (InstanceFactory) setInstanceFactory;
+ GenericFactory function (PropertyConfigurer) addPropertyConfigurer;
}
interface "Storage" {
+ Storage function (char[],Object) set;
+ Storage function (char[]) remove;
}
interface "LocatorAware" {
+ LocatorAware function (Locator) locator;
}
class "InProcessFactoryDecorator" {
+ InProcessFactoryDecorator function (Factory) decorated;
+ Factory function () decorated;
}
class "PrototypeContainer" {
}
class "CallbackConfigurer" {
}
interface "InstanceFactory" {
+ Object function () factory;
}
interface "PropertyConfigurer" {
+ void function (Object) configure;
}
class "ConstructorBasedFactory" {
}
class "InheritanceContainer" {
+ InheritanceContainer function (ConfigurableContainer) container;
+ ConfigurableContainer function () container;
}
"ObjectStorage" --|> "Object"
"ObjectStorage" ..|> "Storage"
"ObjectStorage" ..|> "Locator"
"ObjectStorage" ..|> "AliasAware"
"DelegatingLocatorImpl" --|> "Object"
"DelegatingLocatorImpl" ..|> "LocatorAware"
"DelegatingLocatorImpl" ..|> "Locator"
"AggregateLocator" --|> "Locator"
"AggregateLocator" --|> "Storage"
"GenericFactory" --|> "Factory"
"GenericFactoryImpl" --|> "Object"
"GenericFactoryImpl" ..|> "GenericFactory"
"GenericFactoryImpl" ..|> "LocatorAware"
"ParameterHolder" --|> "Object"
"ParameterHolder" ..|> "LocatorAware"
"MethodConfigurer" --|> "ParameterHolder"
"MethodConfigurer" ..|> "PropertyConfigurer"
"FieldConfigurer" --|> "ParameterHolder"
"FieldConfigurer" ..|> "PropertyConfigurer"
"ConstructorBasedFactory" --|> "ParameterHolder"
"ConstructorBasedFactory" ..|> "InstanceFactory"
"FactoryMethodBasedFactory" --|> "ParameterHolder"
"FactoryMethodBasedFactory" ..|> "InstanceFactory"
"CallbackFactory" --|> "ParameterHolder"
"CallbackFactory" ..|> "InstanceFactory"
"CallbackConfigurer" --|> "ParameterHolder"
"CallbackConfigurer" ..|> "PropertyConfigurer"
"Factory" --|> "LocatorAware"
"LocatorReference" --|> "Object"
"TaggableFactoryDecorator" --|> "Object"
"TaggableFactoryDecorator" ..|> "Factory"
"TaggableFactoryDecorator" ..|> "Taggable"
"CircularReferenceException" --|> "AediException"
"AediException" --|> "Exception"
"InProgressException" --|> "AediException"
"InvalidCastException" --|> "AediException"
"NotFoundException" --|> "AediException"
"ApplicationContainer" --|> "Object"
"ApplicationContainer" ..|> "Container"
"Container" --|> "Locator"
"ConfigurableContainer" --|> "Container"
"ConfigurableContainer" --|> "Storage"
"ConfigurableContainer" --|> "AliasAware"
"InProcessFactoryDecorator" --|> "Object"
"InProcessFactoryDecorator" ..|> "Factory"
"ExceptionChainingFactory" --|> "Object"
"ExceptionChainingFactory" ..|> "Factory"
"InheritanceContainer" --|> "Object"
"InheritanceContainer" ..|> "ConfigurableContainer"
"PrototypeContainer" --|> "Object"
"PrototypeContainer" ..|> "ConfigurableContainer"
"SingletonContainer" --|> "Object"
"SingletonContainer" ..|> "ConfigurableContainer"
"SwitchableContainer" --|> "Object"
"SwitchableContainer" ..|> "ConfigurableContainer"
"SwitchableContainer" ..|> "Container"
"SwitchableContainer" ..|> "Storage"
"SwitchableContainer" ..|> "AliasAware"
"SwitchableContainer" ..|> "Locator"
"SwitchableContainer" ..|> "Switchable"
"ParentAware" o-- "Object"
"LocatorAware" o-- "Locator"
"GenericFactory" o-- "InstanceFactory"
"TaggableFactoryDecorator" o-- "Factory"
"InProcessFactoryDecorator" o-- "Factory"
"ExceptionChainingFactory" o-- "Factory"

@enduml
**/