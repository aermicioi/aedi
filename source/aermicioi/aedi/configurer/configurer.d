/**

License:
	Boost Software License - Version 1.0 - August 17th, 2003
    
    Permission is hereby granted, free of charge, to any person or organization
    obtaining a copy of the software and accompanying documentation covered by
    this license (the "Software") to use, reproduce, display, distribute,
    execute, and transmit the Software, and to prepare derivative works of the
    Software, and to permit third-parties to whom the Software is furnished to
    do so, all subject to the following:
    
    The copyright notices in the Software and this entire statement, including
    the above license grant, this restriction and the following disclaimer,
    must be included in all copies of the Software, in whole or in part, and
    all derivative works of the Software, unless such copies or derivative
    works are solely in the form of machine-executable object code generated by
    a source language processor.
    
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
    SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
    FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
    ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.

Authors:
	Alexandru Ermicioi
**/
module aermicioi.aedi.configurer.configurer;

import aermicioi.aedi.configurer.configurer;
import aermicioi.aedi.instantiator.instantiator;
import aermicioi.aedi.storage.storage;
import aermicioi.aedi.storage.locator;
import aermicioi.aedi.factory;
import aermicioi.aedi.factory.genericfactory;
import aermicioi.util.traits : isReferenceType;

import std.traits : fullyQualifiedName;

/**
A convenience structure that constructs GenericFactory implementations using predefined service locator, and stores it in a factory storage
(i.e. a DI container).
**/
struct Registerer {
    
    private {
        Locator!(Object, string) serviceLocator;
    }
    
    public {
        
        Storage!(Factory, string) _factoryStorage;
        alias _factoryStorage this;
        
        this(Storage!(Factory, string) storage, Locator!(Object, string) locator) {
            this._factoryStorage = storage;
            this.serviceLocator = locator;
        }
        
        auto register(Type)() {
        	return _factoryStorage.register!Type(serviceLocator);
        }
        
        auto register(Type)(string id) {
            return _factoryStorage.register!Type(serviceLocator, id);
        }
        
        auto register(Interface, Type)() {
            return _factoryStorage.register!(Interface, Type);
        }
    }
}

/**
Register a new factory for type T object into storage/DI container by id.

Params:
	storage = the storage where factory will be stored.
	locator = the locator that will be used by GenericFactory implementation to fetch required objects.
	id = the identity by which to register the factory in storage.
	
Returns:
	GenericFactory implementation for further configuration.
**/
auto register(Type)(Storage!(Factory, string) storage, Locator!(Object, string) locator, string id)
    if (isReferenceType!Type) {
    auto fact = new GenericFactoryImpl!Type(locator);
    storage.set(id, fact);
    return fact;
}

/**
ditto
**/
auto register(Type)(ConfigurableInstantiator storage, string id)
    if (isReferenceType!Type) {
    return register!Type(storage, storage, id);
}

/**
Register a new factory for type T object into storage/DI container by it's fully qualified name.

Params:
	storage = the storage where factory will be stored.
	locator = the locator that will be used by GenericFactory implementation to fetch required objects.
	
Returns:
	GenericFactory implementation for further configuration.
**/
auto register(Type)(Storage!(Factory, string) storage, Locator!(Object, string) locator)
    if (isReferenceType!Type) {
    auto fact = new GenericFactoryImpl!Type(locator);
    storage.set(fullyQualifiedName!Type, fact);
    return fact;
}

/**
ditto
**/
auto register(Type)(ConfigurableInstantiator storage)
    if (isReferenceType!Type) {
    return register!Type(storage, storage);
}

/**
Register a new factory for type T object into storage/DI container by Interface fully qualified name.

Params:
	storage = the storage where factory will be stored.
	locator = the locator that will be used by GenericFactory implementation to fetch required objects.
	
Returns:
	GenericFactory implementation for further configuration.
**/
auto register(Interface, Type)(Storage!(Factory, string) storage, Locator!(Object, string) locator)
	if (is(Type : Interface) && isReferenceType!Type) {
    auto fact = new GenericFactoryImpl!Type(locator);
    storage.set(fullyQualifiedName!Interface, fact);
    return fact;
}

/**
ditto
**/
auto register(Interface, Type)(ConfigurableInstantiator storage)
    if (isReferenceType!Type) {
    return register!(Interface, Type)(storage, storage);
}

/**
Register an object into an object storage.

Params:
    storage = the storage in which to contain the object
    object = the actual object contained
    id = the identity of object, used to extract it from container.
    
Returns:
    The storage instance that was object saved.
**/
auto register(Type)(Storage!(Object, string) storage, Type object, string id) 
    if (isReferenceType!Type) {
    
    storage.set(id, object);
    return storage;
}

/**
Register an object into an object storage identified by it's type.

Params:
    storage = the storage in which to contain the object
    object = object to be saved
    
Returns:
    The storage instance were object was saved.
**/
auto register(Type)(Storage!(Object, string) storage, Type object) 
    if (isReferenceType!Type) {
    
    return storage.register!Type(object, fullyQualifiedName!Type);
}

/**
Register an object into an object storage by implemented interface.

Params:
    storage = the storage in which to contain the object
    object = the object to be saved.
    
Returns:
    The storage instance were object was saved.
**/
auto register(Interface, Type)(Storage!(Object, string) storage, Type object) 
    if (is(Type : Interface) && isReferenceType!Type) {
    
    return storage.register!Type(object, fullyQualifiedName!Interface);
}


/**
Register value type data into an object storage.

Wraps up any copy-by-value data into an object, and saves it into storage.

Params:
    storage = the storage were data is saved
    data = actual data to be saved
    id = the identity of data that is to be saved.
    
Returns:
    the storage were data was saved.
**/
auto register(Type)(Storage!(Object, string) storage, Type data, string id)
    if(!isReferenceType!Type) {
    import aermicioi.aedi.storage.wrapper : Wrapper;
    
    auto wrapper = new Wrapper!Type(data);
    storage.set(id, wrapper);
    return storage;
}

/**
Register value type data inta a object storage identified by it's type.

Wraps up any copy-by-value data into an object, and saves it into storage by it's type.

Params:
    storage = the storage were data is saved
    data = actual data to be saved

Returns:
    the storage were data was saved.
**/
auto register(Type)(Storage!(Object, string) storage, Type data)
    if (!isReferenceType!Type) {
    return storage.register(data, fullyQualifiedName!Type);
}