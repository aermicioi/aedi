/**
Contains a specific implementation of generic factory used solely in conjunction
with register api.

License:
	Boost Software License - Version 1.0 - August 17th, 2003

	Permission is hereby granted, free of charge, to any person or organization
	obtaining a copy of the software and accompanying documentation covered by
	this license (the "Software") to use, reproduce, display, distribute,
	execute, and transmit the Software, and to prepare derivative works of the
	Software, and to permit third-parties to whom the Software is furnished to
	do so, all subject to the following:

	The copyright notices in the Software and this entire statement, including
	the above license grant, this restriction and the following disclaimer,
	must be included in all copies of the Software, in whole or in part, and
	all derivative works of the Software, unless such copies or derivative
	works are solely in the form of machine-executable object code generated by
	a source language processor.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
	SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
	FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
	ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
	DEALINGS IN THE SOFTWARE.

Authors:
	aermicioi
**/
module aermicioi.aedi.configurer.register.configuration_context_factory;

import aermicioi.aedi.util.typecons : ArgsConstructor;
import aermicioi.aedi.factory.decorating_factory;
import aermicioi.aedi.factory.factory;
import aermicioi.aedi.factory.generic_factory;
import aermicioi.aedi.storage.storage;
import aermicioi.aedi.storage.decorator : MutableDecoratorMixin;
import aermicioi.aedi.storage.locator : Locator;
import std.experimental.allocator : RCIAllocator;

package
{

	@safe class ConfigurableFactory(T, Policies...) : GenericFactory!T
	{

		static foreach (Policy; Policies)
		{
			mixin Policy!();
		}
	}

	mixin template DecoratingFactoryPolicy()
	{
		import aermicioi.aedi.storage.allocator_aware : AllocatorAwareMixin;
		import aermicioi.aedi.storage.locator_aware : LocatorAwareMixin;
		mixin MutableDecoratorMixin!(GenericFactory!T);
		mixin InstanceDestructorAwareDecoratorMixin!T;
		mixin InstanceFactoryAwareDecoratorMixin!T;
		mixin PropertyConfigurersAwareDecoratorMixin!T;

		/**
		Instantiates component of type T.

		Returns:
			T instantiated component.
		**/
		T factory() @safe {
			return this.decorated.factory();
		}

		/**
		Destructs a component of type T.

		Params:
			component = component that is to ve destroyed.
		**/
		void destruct(ref T component) @safe {
			this.decorated.destruct(component);
		}

		@property {

			/**
			Get the type info of T that is created.

			Returns:
				TypeInfo object of created component.
			**/
			TypeInfo type() @safe nothrow const {
				return this.decorated.type();
			}
		}

		// allocator section, required due to more advanced logic that storing.
		import std.experimental.allocator : RCIAllocator, make, theAllocator;
		private {
			RCIAllocator allocator_;
		}

		public {
			@property {
				/**
				Set allocator

				Params:
					allocator = allocator used to create components

				Returns:
					typeof(this)
				**/
				typeof(this) allocator(RCIAllocator allocator) @safe nothrow
				in {
					assert(!allocator.isNull, "Expected an allocator, not null.");
				}
				do {
					this.allocator_ = allocator;

					if (this.decorated_ !is null) {
						this.decorated.allocator = allocator;
					}

					return this;
				}

				/**
				Get allocator

				Returns:
					Z
				**/
				inout(RCIAllocator) allocator() @safe nothrow inout
				out(allocator) {
					assert(!allocator.isNull, "Expected an allocator, not null.");
				}
				do {
					return this.allocator_;
				}
			}
		}

		// Locator storage, same reason as for allocator.
		import aermicioi.aedi.storage.locator;
		private {
			Locator!() locator_;
		}

		@property {
			/**
			Set locator

			Params:
				locator = the locator used somehow by locator aware component

			Returns:
				typeof(this)
			**/
			typeof(this) locator(Locator!() locator) @safe nothrow
			in (locator !is null, "A locator is expected not null.")
			{
				this.locator_ = locator;

				if (this.decorated_ !is null) {
					this.decorated.locator = locator;
				}

				return this;
			}

			/**
			Get locator

			Returns:
				Locator!()
			**/
			inout(Locator!()) locator() @safe nothrow inout
			out(lc; lc !is null, "Cannot return a locator, when it wasn't set in first case.") {
				return this.locator_;
			}
		}
	}

	mixin template RegistrationStorePolicy()
	{
		private string file_;
		private size_t line_;

		/**
		Set file

		Params:
			file = location in d module where it was registered
		Returns:
			typeof(this)
		**/
		typeof(this) file(string file) @safe nothrow pure
		{
			this.file_ = file;

			return this;
		}

		/**
		Get file

		Returns:
			string
		**/
		inout(string) file() @safe nothrow pure inout
		{
			return this.file_;
		}

		/**
		Set line

		Params:
			line = line on which registration happened

		Returns:
			typeof(this)
		**/
		typeof(this) line(size_t line) @safe nothrow pure
		{
			this.line_ = line;

			return this;
		}

		/**
		Get line

		Returns:
			size_t
		**/
		inout(size_t) line() @safe nothrow pure inout
		{
			return this.line_;
		}
	}

	mixin template WrapperStorePolicy()
	{
		ObjectFactory wrapper_;

		/**
		Set wrapper

		Params:
			wrapper = wrapper of factory stored in storage
		Returns:
			typeof(this)
		**/
		typeof(this) wrapper(ObjectFactory wrapper) @safe nothrow pure
		{
			this.wrapper_ = wrapper;

			return this;
		}

		/**
		Get wrapper

		Returns:
			ObjectFactory
		**/
		inout(ObjectFactory) wrapper() @safe nothrow pure inout
		{
			return this.wrapper_;
		}
	}

	mixin template StoragePolicy()
	{
		Storage!(ObjectFactory, string) storage_;
		string identity_;

		/**
		Set storage

		Params:
			storage = storage that stores component factories
		Returns:
			typeof(this)
		**/
		typeof(this) storage(Storage!(ObjectFactory, string) storage) @safe nothrow pure
		{
			this.storage_ = storage;

			return this;
		}

		/**
		Get storage

		Returns:
			Storage!(ObjectFactory, string)
		**/
		inout(Storage!(ObjectFactory, string)) storage() @safe nothrow pure inout
		{
			return this.storage_;
		}

		/**
		Set identity

		Params:
			identity = identity of component in storage

		Returns:
			typeof(this)
		**/
		typeof(this) identity(string identity) @safe nothrow pure
		{
			this.identity_ = identity;

			return this;
		}

		/**
		Get identity

		Returns:
			string
		**/
		inout(string) identity() @safe nothrow pure inout
		{
			return this.identity_;
		}
	}

	template ContainsPolicy(alias Policy, Policies...) {
		import std.traits : fullyQualifiedName;
		static foreach (Testable; Policies) {
			static if (!is(typeof(Result)) && __traits(isSame, Testable, Policy)) {
				enum Result = true;
			}
		}

		static if (!is(typeof(Result))) {
			enum Result = false;
		}

		alias ContainsPolicy = Result;
	}
}