/**
License:
	Boost Software License - Version 1.0 - August 17th, 2003

	Permission is hereby granted, free of charge, to any person or organization
	obtaining a copy of the software and accompanying documentation covered by
	this license (the "Software") to use, reproduce, display, distribute,
	execute, and transmit the Software, and to prepare derivative works of the
	Software, and to permit third-parties to whom the Software is furnished to
	do so, all subject to the following:
	
	The copyright notices in the Software and this entire statement, including
	the above license grant, this restriction and the following disclaimer,
	must be included in all copies of the Software, in whole or in part, and
	all derivative works of the Software, unless such copies or derivative
	works are solely in the form of machine-executable object code generated by
	a source language processor.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
	SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
	FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
	ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
	DEALINGS IN THE SOFTWARE.

Authors:
	aermicioi
**/
module aermicioi.aedi.factory.wrapping_factory;

import aermicioi.aedi.factory.factory;
import aermicioi.aedi.factory.generic_factory;
import aermicioi.aedi.storage.decorator;
import aermicioi.aedi.storage.locator;
import aermicioi.aedi.storage.wrapper;
import std.traits;

/**
Wraps up the result of some factory in Wrapper object if component is not
derived from Object.
**/
class WrappingFactory(T : Factory!Z, Z) : ObjectFactory, MutableDecorator!T {
    
    private {
        T decorated_;
    }
    
    public {

        /**
        Constructor for WrappingFactory!(T, Z)
        
        Params: 
            factory = factory that is wrapped
        **/
        this(T factory) {
            this.decorated = factory;
        }
        
        @property {
            
            /**
            Set the decorated object for decorator.
            
            Params:
                decorated = decorated data
            
            Returns:
            	this
            **/
        	WrappingFactory!(T, Z) decorated(T decorated) @safe nothrow {
        		this.decorated_ = decorated;
        	
        		return this;
        	}
        	
            /**
            Get the decorated object.
            
            Returns:
            	T decorated object
            **/
        	T decorated() @safe nothrow {
        		return this.decorated_;
        	}
        	
            /**
    		Get the type info of T that is created.
    		
    		Returns:
    			TypeInfo object of created component.
    		**/
        	TypeInfo type() {
        	    return this.decorated.type;
        	}
        	
            /**
            Set a locator to object.
            
            Params:
                locator = the locator that is set to oject.
            
            Returns:
                LocatorAware.
            **/
        	WrappingFactory!T locator(Locator!() locator) {
        		this.decorated.locator = locator;
        	
        		return this;
        	}
        	
        }
        
        /**
		Instantiates component of type T.
		
		Returns:
			Object instantiated component and probably wrapped if not derived from Object.
		**/
        Object factory() {
            static if (is(Z : Object)) {
                
                return this.decorated.factory;
            } else static if (is(Z == class)) {
                import aermicioi.aedi.storage.wrapper : CastableWrapperImpl;
                return new CastableWrapperImpl!(Z, InterfacesTuple!Z)(this.decorated.factory);
                // return new CastableWrapperImpl!(Z, InterfacesTuple!Z, BaseClassesTuple!Z)(this.decorated.factory); /// Nope not working with extern classes
            } else static if (is(Z == ubyte)) {
                return new CastableWrapperImpl!(Z, ushort, uint, ulong, short, int, long, float, double)(this.decorated.factory);
            } else static if (is(Z == ushort)) {
                return new CastableWrapperImpl!(Z, uint, ulong, int, long, float, double)(this.decorated.factory);
            } else static if (is(Z == uint)) {
                return new CastableWrapperImpl!(Z, ulong, long, float, double)(this.decorated.factory);
            } else static if (is(Z == ulong)) {
                return new CastableWrapperImpl!(Z, double)(this.decorated.factory);
            } else static if (is(Z == byte)) {
                return new CastableWrapperImpl!(Z, short, int, long, float, double)(this.decorated.factory);
            } else static if (is(Z == short)) {
                return new CastableWrapperImpl!(Z, int, long, float, double)(this.decorated.factory);
            } else static if (is(Z == int)) {
                return new CastableWrapperImpl!(Z, long, float, double)(this.decorated.factory);
            } else static if (is(Z == long)) {
                return new CastableWrapperImpl!(Z, double)(this.decorated.factory);
            } else static if (is(Z == float)) {
                return new CastableWrapperImpl!(Z, double)(this.decorated.factory);
            } else static if (is(Z == double)) {
                return new WrapperImpl!(Z)(this.decorated.factory);
            } else {
                import aermicioi.aedi.storage.wrapper : WrapperImpl;
                return new WrapperImpl!Z(this.decorated.factory);
            }
        }
    }
}

/**
Wrapping factory that will wrap the result depending on runtime type information
instead of compile time information.
**/
class RuntimeWrappingFactory(T : Factory!Z, Z) : WrappingFactory!(T) {
    
    public {
        
        /**
        Constructor for RuntimeWrappingFactory!(T, Z)
        
        Params: 
            factory = factory that is to be wrapped up in
        **/
        this(T factory) {
            super(factory);
        }
        
        /**
		Instantiates component of type T.
		
		Returns:
			Object instantiated component and probably wrapped if not derived from Object.
		**/
        override Object factory() {
            static if (is(Z == interface) || is(Z == class)) {
                if (this.decorated.type.isDerived(typeid(Object))) {
                    return cast(Object) this.decorated.factory;
                }
            }
            
            {
                return new WrapperImpl!Z(this.decorated.factory);
            }
        }
    }
}

/**
A factory that coerces an object from object factory to
some T type.

A factory that coerces an object from object factory to
some T type. If T is not rooted in Object class it is
assumed by convention that Wrapper!T object is returned
by object factory.
**/
class UnwrappingFactory(T) : Factory!T {
    
    private {
        ObjectFactory decorated_;
    }
    
    public {
        
        /**
        Constructor for UnwrappingFactory
        
        Params: 
            factory = factory from which created components will be coerced to T type if possible
        **/
        this(ObjectFactory factory) {
            this.decorated = factory;
        }
        
        @property {
            /**
            Set the decorated object for decorator.
            
            Throws:
                InvalidCastException when created type of object factory mismatches type of unwrapping factory.
            
            Params:
                decorated = decorated data
            
            Returns:
            	this
            **/
        	UnwrappingFactory!T decorated(ObjectFactory decorated)
            in {
                if (decorated.type != typeid(T)) {
        	        import aermicioi.aedi.exception.invalid_cast_exception : InvalidCastException;
        	        
        	        throw new InvalidCastException(
                        "Cannot unwrap a type " ~
                         decorated.type.toString() ~ 
                         " and cast it to " ~ 
                         typeid(T).toString()
                    );
        	    }
            }
            body {
        		this.decorated_ = decorated;
        	
        		return this;
        	}
        	
        	/**
            Get the decorated object.
            
            Returns:
            	ObjectFactory decorated object
            **/
        	ObjectFactory decorated() {
        		return this.decorated_;
        	}
        	
        	/**
    		Get the type info of T that is created.
    		
    		Returns:
    			TypeInfo object of created object.
    		**/
        	TypeInfo type() {
        	    return this.decorated.type;
        	}
        	
        	/**
    		Set a locator to object.
    		
    		Params:
    			locator = the locator that is set to oject.
    		
    		Returns:
    			LocatorAware.
    		**/
        	UnwrappingFactory!T locator(Locator!() locator) {
        	    this.decorated.locator = locator;
        	    
        	    return this;
        	}
        }
        
        /**
		Instantiates something of type T.
		
		Returns:
			T instantiated data of type T.
		**/
        T factory() {
            Object wrapped = this.decorated.factory;
            
            static if (is(T : Object)) {
                T component = cast(T) wrapped;
                
                if (component !is null) {
                    return component;
                }
            } else {
                Wrapper!T component = cast(Wrapper!T) wrapped;
                
                if (component !is null) {
                    return component;
                }
            }
            
            assert(0, "Fatal error, application logic never should reach this region");
        }
    }
}

/**
A factory that coerces an object from object factory to
some T type.

A factory that coerces an object from object factory to
some T type. It will attempt as well to safely object to
type T if it is possible to prove that created object
is a derivation of type T. If T is not rooted in Object 
class it is assumed by convention that Wrapper!T object 
is returned by object factory.
**/
class ClassUnwrappingFactory(T) : Factory!T {
    
    private {
        ObjectFactory decorated_;
    }
    
    public {

        /**
        Constructor for ClassUnwrappingFactory
        
        Params: 
            factory = factory from which created components will be coerced to T type if possible
        **/
        this(ObjectFactory factory) {
            this.decorated = factory;
        }
        
        @property {
            /**
            Set the decorated object for decorator.
            
            Throws:
                InvalidCastException when created type of object factory mismatches type of unwrapping factory.
            
            Params:
                decorated = decorated data
            
            Returns:
            	this
            **/
        	ClassUnwrappingFactory!T decorated(ObjectFactory decorated)
            in {
                if (!decorated.type.isDerived(typeid(T))) {
        	        import aermicioi.aedi.exception.invalid_cast_exception;
        	        
        	        throw new InvalidCastException("Cannot unwrap a type " ~ decorated.type.toString() ~ " and cast it to " ~ typeid(T).toString());
        	    }
            }
            body {
        		this.decorated_ = decorated;
        	
        		return this;
        	}
        	
        	/**
            Get the decorated object.
            
            Returns:
            	ObjectFactory decorated object
            **/
        	ObjectFactory decorated() {
        		return this.decorated_;
        	}
        	
        	/**
    		Get the type info of T that is created.
    		
    		Returns:
    			TypeInfo object of created object.
    		**/
        	TypeInfo type() {
        	    return this.decorated.type;
        	}
        	
        	/**
    		Set a locator to object.
    		
    		Params:
    			locator = the locator that is set to oject.
    		
    		Returns:
    			LocatorAware.
    		**/
        	ClassUnwrappingFactory!T locator(Locator!() locator) {
        	    this.decorated.locator = locator;
        	    
        	    return this;
        	}
        }
        
        /**
		Instantiates something of type T.
		
		Returns:
			T instantiated data of type T.
		**/
        T factory() {
            Object wrapped = this.decorated.factory;
            
            {
                static if (is(T : Object)) {
                    
                    T component = cast(T) wrapped;
                    
                    if (component !is null) {
                        return component;
                    }
                } 
            }
             
            {
                static if (is(T == interface) || is(T == class)) {
                    
                    T component = cast(T) wrapped;
                    
                    if (component !is null) {
                        return component;
                    }
                }
            }
             
            Wrapper!T component = cast(Wrapper!T) wrapped;
            
            if (component !is null) {
                return component;
            }
            
            assert(0, "Fatal error, application logic never should reach this region");
        }
    }
}

private {
    import std.stdio;
    
    bool isDerived(TypeInfo subject, TypeInfo derivation) {
        if (subject == derivation) {
            return true;
        }
        
        if ((cast(ClassInfo) subject !is null) && (cast(ClassInfo) derivation !is null)) {
            return isDerived(cast(ClassInfo) subject, cast(ClassInfo) derivation);
        }
        
        if ((cast(ClassInfo) subject !is null) && (cast(TypeInfo_Interface) derivation !is null)) {
            return isDerived(cast(ClassInfo) subject, cast(TypeInfo_Interface) derivation);
        }
        
        if ((cast(TypeInfo_Interface) subject !is null) && (cast(TypeInfo_Interface) derivation !is null)) {
            return isDerived(cast(TypeInfo_Interface) subject, cast(TypeInfo_Interface) derivation);
        }
        
        return false;
    }
    
    bool isDerived(ClassInfo subject, ClassInfo derivation) {
        if (
            (subject == derivation) ||
            (
                (subject.base !is null) && 
                subject.base.isDerived(derivation)
            )
        ) {
            return true;
        }
        
        foreach (iface; subject.interfaces) {
            if (iface.classinfo.isDerived(derivation)) {
                return true;
            }
        }
        
        return false;
    }
    
    bool isDerived(ClassInfo subject, TypeInfo_Interface iface) {
        return subject.isDerived(iface.info);
    }
    
    bool isDerived(TypeInfo_Interface subject, TypeInfo_Interface iface) {
        return subject.info.isDerived(iface.info);
    }
}

class DefferedProxyWrapper(T : Factory!Z, Z : Object) : Factory!Z, MutableDecorator!T, DefferredExecutionerAware {
    import aermicioi.aedi.exception;
    mixin MutableDecoratorMixin!T;

    private {

        DefferredExecutioner executioner_;
    }

    public {
        this(T factory) {
            this.decorated = factory;
        }

        @property {
            /**
            Set executioner
            
            Params: 
                executioner = executioner used for deffered construction.
            
            Returns:
                typeof(this)
            **/
            typeof(this) executioner(DefferredExecutioner executioner) @safe nothrow pure {
                this.executioner_ = executioner;
            
                return this;
            }
            
            /**
            Get executioner
            
            Returns:
                DefferredExecutioner
            **/
            DefferredExecutioner executioner() @safe nothrow pure {
                return this.executioner_;
            }

            /**
    		Get the type info of T that is created.
    		
    		Returns:
    			TypeInfo object of created component.
    		**/
        	TypeInfo type() {
        	    return this.decorated.type;
        	}
        	
            /**
            Set a locator to object.
            
            Params:
                locator = the locator that is set to oject.
            
            Returns:
                LocatorAware.
            **/
        	DefferedProxyWrapper!T locator(Locator!() locator) {
        		this.decorated.locator = locator;
        	
        		return this;
        	}
        }

        Z factory() {
            try {
                return this.decorated.factory();
            } catch (AediException exception) {

                if (this.executioner !is null) {

                    Throwable current = exception;

                    while (current !is null) {

                        CircularReferenceException circularReferenceException = cast(CircularReferenceException) current;

                        if (current !is null) {

                            if (circularReferenceException !is null) {

                                DefferedProxy!Z proxy = new DefferedProxy!Z;
                                this.executioner.add(
                                    () {
                                        proxy.original__ = this.decorated.factory();
                                    }
                                );

                                return proxy;
                            }
                        }
                    }
                }

                throw exception;
            }
        }
    }
}

private abstract class DefferedProxyHusk(T) : T {

    protected {
        T original__;
    }

    public {
        
    }
}

import std.typecons : AutoImplement;
import std.traits;

alias DefferedProxy(T) = AutoImplement!(
    DefferedProxyHusk!T,
    __how,
    __what
    );

template __what(alias fun) {
    enum bool __what = !isFinalFunction!(fun) || (__traits(identifier, fun) == "__ctor") || (__traits(identifier, fun) == "__dtor");
}

string __how(C, alias fun)() {

    static if (__traits(identifier, fun) == "__ctor") {
        return __ctor!(C, fun);
    } else static if (__traits(identifier, fun) == "__dtor") {
        return __dtor!(C, fun);
    } else {
        return __method!(C, fun);
    }
}

string __method(C, alias fun)() {
    string stmt = null;
    static if (!is(ReturnType!fun == void)) {
    
        stmt ~= q{return };
    }

    return stmt ~ q{original__.} ~ __traits(identifier, fun) ~ q{(args);};
}

string __ctor(C, alias fun)() {
    return q{
        super(args);
    };
}

string __dtor(C, alias fun)() {
    return q{};
}