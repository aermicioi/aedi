/**
Contains factories that are used for decorational purposes like tagging with additional
 information, or wrapping result of a factory in some container.

License:
	Boost Software License - Version 1.0 - August 17th, 2003

	Permission is hereby granted, free of charge, to any person or organization
	obtaining a copy of the software and accompanying documentation covered by
	this license (the "Software") to use, reproduce, display, distribute,
	execute, and transmit the Software, and to prepare derivative works of the
	Software, and to permit third-parties to whom the Software is furnished to
	do so, all subject to the following:
	
	The copyright notices in the Software and this entire statement, including
	the above license grant, this restriction and the following disclaimer,
	must be included in all copies of the Software, in whole or in part, and
	all derivative works of the Software, unless such copies or derivative
	works are solely in the form of machine-executable object code generated by
	a source language processor.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
	SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
	FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
	ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
	DEALINGS IN THE SOFTWARE.

Authors:
	aermicioi
**/
module aermicioi.aedi.factory.decorating_factory;

import aermicioi.aedi.factory.factory;
import aermicioi.aedi.storage.locator;
import aermicioi.aedi.factory.generic_factory;
import aermicioi.aedi.storage.decorator;

alias ObjectFactoryDecorator = Decorator!ObjectFactory;

/**
A base class for generic factory decorators that channels calls
to decorated generic factory.
**/
abstract class DecoratableGenericFactory(T) : GenericFactory!T, MutableDecorator!(GenericFactory!T) {
    
    private {
        Locator!() locator_;
        GenericFactory!T decorated_;
    }
    
    public {
        @property {
        	
        	DecoratableGenericFactory!T locator(Locator!() locator) @safe nothrow {
        		this.locator_ = locator;
        	
        		return this;
        	}
        	
        	Locator!() locator() {
        		return this.locator_;
        	}
        	
        	DecoratableGenericFactory!T decorated(GenericFactory!T decorated) @safe nothrow {
        		this.decorated_ = decorated;
        	
        		return this;
        	}
        	
        	GenericFactory!T decorated() @safe nothrow {
        		return this.decorated_;
        	}
        	
        	GenericFactory!T setInstanceFactory(InstanceFactory!T factory) {
        	    this.decorated.setInstanceFactory(factory);
        	    
        	    return this;
        	}
        }
        
        T factory() {
            return this.decorated.factory();
        }
        
        TypeInfo type() {
            return this.decorated.type();
        }
        
        GenericFactory!T addPropertyConfigurer(PropertyConfigurer!T configurer) {
            this.decorated.addPropertyConfigurer(configurer);
            
            return this;
        }
    }
}

/**
An object that can be tagged with some information.
**/
interface Taggable(T) {
    import std.range.interfaces : InputRange;
    public {
        
        /**
        Tag object with some information
        
        Params:
        	tag = information that object should be tagged with.
        
        Returns:
        	this
        **/
        Taggable!T tag(T tag);
        
        /**
        Remove tagged information from object.
        
        Params:
        	tag = tagged information that should be removed
        
        Returns:
        	this
        **/
        Taggable!T untag(T tag);
        
        /**
        Get all tagged information from this object.
        
        Returns:
        	T[] a list of tags.
        **/
        T[] tags();
    }
}

/**
Decorates a factory with tagging functionality.
**/
class TaggableFactoryDecorator(T, Z) : Factory!T, Taggable!Z, Decorator!(Factory!T) {
    
    private {
        Factory!T decorated_;
        
        Z[] tags_;
    }
    
    public {
        @property {
        	TaggableFactoryDecorator!(T, Z) decorated(Factory!T decorated) @safe nothrow {
            	this.decorated_ = decorated;
            
            	return this;
            }
            
            Factory!T decorated() @safe nothrow {
            	return this.decorated_;
            }
            
            TaggableFactoryDecorator tags(Z[] tags) @safe nothrow {
            	this.tags_ = tags;
            
            	return this;
            }
            
            Z[] tags() @safe nothrow {
            	return this.tags_;
            }
            
            TaggableFactoryDecorator locator(Locator!() locator) {
            	this.decorated.locator = locator;
            
            	return this;
            }
            
            TypeInfo type() {
                return this.decorated.type;
            }
        }
        
        TaggableFactoryDecorator tag(Z tag) {
            this.tags_ ~= tag;
            
            return this;
        }
        
        TaggableFactoryDecorator untag(Z tag) {
            import std.algorithm : filter;
            import std.array : array;
            
            this.tags_ = this.tags_.filter!(t => t != tag).array;
            
            return this;
        }
        
        T factory() {
            return this.decorated.factory;
        }
    }
}