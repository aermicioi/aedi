/**
License:
	Boost Software License - Version 1.0 - August 17th, 2003

	Permission is hereby granted, free of charge, to any person or organization
	obtaining a copy of the software and accompanying documentation covered by
	this license (the "Software") to use, reproduce, display, distribute,
	execute, and transmit the Software, and to prepare derivative works of the
	Software, and to permit third-parties to whom the Software is furnished to
	do so, all subject to the following:
	
	The copyright notices in the Software and this entire statement, including
	the above license grant, this restriction and the following disclaimer,
	must be included in all copies of the Software, in whole or in part, and
	all derivative works of the Software, unless such copies or derivative
	works are solely in the form of machine-executable object code generated by
	a source language processor.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
	SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
	FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
	ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
	DEALINGS IN THE SOFTWARE.

Authors:
	aermicioi
**/
module aermicioi.aedi.test.fixture_second;

import aermicioi.aedi.configurer.annotation;

interface Identifiable(T) {
    public @property {
        T id();
    }
}

@component
class Company : Identifiable!ulong {
    private {
        Employee[] employees_;
        ulong id_;
    }
    
    public {
        
        this() {
            
        }
        
        @constructor(20)
        this(ulong id) {
            this.id = id;
        }
        
        override bool opEquals(Object obj) {
            return super.opEquals(obj);
        }
        
        bool opEquals(Company company) {
            return
                company.id == this.id;
        }
        
        @property {
            Company employees(Employee[] employees) {
            	this.employees_ = employees;
            
            	return this;
            }
            
            Employee[] employees() {
            	return this.employees_;
            }

        }
        
        @setter(lref!Employee)
        Company addEmployee(Employee employee) {
            this.employees_ ~= employee;
            
            return this;
        }
        
        Company id(ulong id) {
        	this.id_ = id;
        
        	return this;
        }
        
        ulong id() {
        	return this.id_;
        }
        
    }
}

@component
class Employee : Person {
    private {
        Company company_;
        Job job_;
    }
    
    public {
        this() {
            
        }
        
        @autowired
        this(string name, ubyte age) {
            super(name, age);
        }
        
        this(string name, ubyte age, Job job) {
            super(name, age);
            this.job = job;
        }
        
        /**
        A bug is present with getProtection traits, that segfaults 
        the compiler, when it is invoked on a method that has an 
        overload set imported from parent class.
        **/
        override bool opEquals(Object obj) {
            return super.opEquals(obj);
        }
        
        override bool opEquals(Person obj) {
            return super.opEquals(obj);
        }
        
        bool opEquals(Employee employee) {
            return
                (cast(Person) employee == cast(Person) this) &&
                (employee.job == this.job);
        }
    }
    
    public @property {
        
        Employee company(Company company) {
        	this.company_ = company;
        
        	return this;
        }
        
        Company company() {
        	return this.company_;
        }

        @autowired
        Employee job(Job job) {
        	this.job_ = job;
        
        	return this;
        }
        
        Job job() {
        	return this.job_;
        }
    }
}

@component
class Person : Identifiable!ulong {
    private {
        ubyte age_;
        string name_;
        string surname_;
        ulong id_;
    }
    
    public {
        this() {
            
        }
        
        this(string name, ubyte age) {
            this.name = name;
            this.age = age;
        }
        
        override bool opEquals(Object obj) {
            return super.opEquals(obj);
        }
        
        bool opEquals(Person person) {
            return
                (person.name == this.name) &&
                (person.age == this.age) &&
                (person.id == this.id) &&
                (person.surname == this.surname);
        }
    }
    
    public @property {
        Person id(ulong id) {
        	this.id_ = id;
        
        	return this;
        }
        
        ulong id() {
        	return this.id_;
        }
        
        @setter(10)
        Person age(ubyte age) {
        	this.age_ = age;
        
        	return this;
        }
        
        ubyte age() {
        	return this.age_;
        }
        
        @setter("A simple name")
        Person name(string name) {
        	this.name_ = name;
        
        	return this;
        }
        
        string name() {
        	return this.name_;
        }
        
        @setter("surname.parameter")
        Person surname(string surname) {
        	this.surname_ = surname;
        
        	return this;
        }
        
        string surname() {
        	return this.surname_;
        }
        
    }
}

@component
class Job : Identifiable!ulong {
    private {
        string name_;
        ulong payment_;
        ulong id_;
    }
    
    public {
        this() {
            
        }
        
        this(string name, ulong payment) {
            this.name = name;
            this.payment = payment;
        }
        
        override bool opEquals(Object obj) {
            return super.opEquals(obj);
        }
        
        bool opEquals(Job jb) {
            return
                (jb.name == this.name) &&
                (jb.payment == this.payment);
        }
    }
    
    public @property {
        
        Job id(ulong id) {
        	this.id_ = id;
        
        	return this;
        }
        
        ulong id() {
        	return this.id_;
        }
        
        @setter("Simple name")
        Job name(string name) {
        	this.name_ = name;
        
        	return this;
        }
        
        string name() {
        	return this.name_;
        }
        
        @setter(2000UL)
        Job payment(ulong payment) {
        	this.payment_ = payment;
        
        	return this;
        }
        
        ulong payment() {
        	return this.payment_;
        }
        
    }
}