/**
License:
	Boost Software License - Version 1.0 - August 17th, 2003

	Permission is hereby granted, free of charge, to any person or organization
	obtaining a copy of the software and accompanying documentation covered by
	this license (the "Software") to use, reproduce, display, distribute,
	execute, and transmit the Software, and to prepare derivative works of the
	Software, and to permit third-parties to whom the Software is furnished to
	do so, all subject to the following:
	
	The copyright notices in the Software and this entire statement, including
	the above license grant, this restriction and the following disclaimer,
	must be included in all copies of the Software, in whole or in part, and
	all derivative works of the Software, unless such copies or derivative
	works are solely in the form of machine-executable object code generated by
	a source language processor.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
	SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
	FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
	ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
	DEALINGS IN THE SOFTWARE.

Authors:
	aermicioi
**/
module aermicioi.aedi.test.factory.generic_factory;

import aermicioi.aedi.storage.object_storage;
import aermicioi.aedi.test.fixture;
import aermicioi.aedi.factory.generic_factory;
import aermicioi.aedi.exception.di_exception;
import aermicioi.aedi.exception.instance_factory_exception;
import aermicioi.aedi.exception.property_configurer_exception;
import aermicioi.aedi.factory.reference;
import aermicioi.aedi.storage.locator;
import aermicioi.aedi.storage.wrapper;
import std.exception;

unittest {
    ObjectStorage!() storage = new ObjectStorage!();
    GenericFactory!MockObject factory = new GenericFactoryImpl!MockObject(storage);
    
    assert(factory.locator() is storage);
    assert(factory.type() is typeid(MockObject));
    
    factory.setInstanceFactory(null);
    assertThrown!AediException(factory.factory);
    factory.setInstanceFactory(new DefaultConstructorBasedFactory!MockObject);
    assert(factory.factory().classinfo is typeid(MockObject));
}

unittest {
    ObjectStorage!() storage = new ObjectStorage!();
    MockObject obj = new MockObject;
    auto smethod = methodConfigurer!("method", MockObject)(storage, 20, 10);
    auto rmethod = methodConfigurer!("method", MockObject)(storage, new LocatorReference("int"), 10);
    auto emethod = methodConfigurer!("nasty", MockObject)(storage);
    
    storage.set(new WrapperImpl!int(10), "int");
    
    smethod.configure(obj);
    assert(obj.property == 30);
    rmethod.configure(obj);
    assert(obj.property == 20);
    assertThrown(emethod.configure(obj));
}

unittest {
    ObjectStorage!() storage = new ObjectStorage!();
    MockObject obj = new MockObject;
    auto sproperty = fieldConfigurer!("property", MockObject)(storage, 10);
    auto rproperty = fieldConfigurer!("property", MockObject)(storage, new LocatorReference("int"));
    auto eproperty = fieldConfigurer!("property", MockObject)(storage, new LocatorReference("unknown"));
    
    storage.set(new WrapperImpl!int(20), "int");
    
    sproperty.configure(obj);
    assert(obj.property == 10);
    rproperty.configure(obj);
    assert(obj.property == 20);
    assertThrown(eproperty.configure(obj));
}

unittest {
    ObjectStorage!() storage = new ObjectStorage!();
    DefaultConstructorBasedFactory!MockObject cfactory = new DefaultConstructorBasedFactory!MockObject;
    DefaultConstructorBasedFactory!MockStruct sfactory = new DefaultConstructorBasedFactory!MockStruct;
    assert(cfactory.factory !is null);
    assert(sfactory.factory == MockStruct.init);
}

unittest {
    ObjectStorage!() storage = new ObjectStorage!();
    auto csfactory = constructorBasedFactory!MockObject(storage, 10);
    auto crfactory = constructorBasedFactory!MockObject(storage, new LocatorReference("int"));
    auto cefactory = constructorBasedFactory!MockObject(storage, new LocatorReference("unknown"));
    
    storage.set(new WrapperImpl!int(20), "int");
    
    assert(csfactory.factory.property == 10);
    assert(crfactory.factory.property == 20);
    assertThrown!InstanceFactoryException(cefactory.factory);
}

unittest {
    ObjectStorage!() storage = new ObjectStorage!();
    auto scsfactory = factoryMethodBasedFactory!(MockObjectFactoryMethod, "staticFactoryObject")(storage, 10);
    auto scrfactory = factoryMethodBasedFactory!(MockObjectFactoryMethod, "staticFactoryObject")(storage, new LocatorReference("int"));
    auto scefactory = factoryMethodBasedFactory!(MockObjectFactoryMethod, "staticFactoryObject")(storage, new LocatorReference("unknown"));
    auto sssfactory = factoryMethodBasedFactory!(MockObjectFactoryMethod, "staticFactoryStruct")(storage, 10);
    auto ssrfactory = factoryMethodBasedFactory!(MockObjectFactoryMethod, "staticFactoryStruct")(storage, new LocatorReference("int"));
    auto ssefactory = factoryMethodBasedFactory!(MockObjectFactoryMethod, "staticFactoryStruct")(storage, new LocatorReference("unknown"));
    
    auto cfactory = new MockObjectFactoryMethod;
    auto sfactory = new MockObjectFactoryMethod;
    
    cfactory.property = 10;
    sfactory.property = 11;
    storage.set(new MockObjectFactoryMethod, "dfactory");
    
    auto dcsfactory = factoryMethodBasedFactory!(MockObjectFactoryMethod, "factoryObject")(storage, cfactory);
    auto dcrfactory = factoryMethodBasedFactory!(MockObjectFactoryMethod, "factoryObject")(storage, new LocatorReference("dfactory"));
    auto dcefactory = factoryMethodBasedFactory!(MockObjectFactoryMethod, "factoryObject")(storage, new LocatorReference("unknown"));
    auto dssfactory = factoryMethodBasedFactory!(MockObjectFactoryMethod, "factoryStruct")(storage, sfactory);
    auto dsrfactory = factoryMethodBasedFactory!(MockObjectFactoryMethod, "factoryStruct")(storage, new LocatorReference("dfactory"));
    auto dsefactory = factoryMethodBasedFactory!(MockObjectFactoryMethod, "factoryStruct")(storage, new LocatorReference("unknown"));
    
    storage.set(new WrapperImpl!int(20), "int");
    
    assert(scsfactory.factory.property == 10);
    assert(scrfactory.factory.property == 20);
    assertThrown!InstanceFactoryException(scefactory.factory);
    
    assert(sssfactory.factory.property == 10);
    assert(ssrfactory.factory.property == 20);
    assertThrown!InstanceFactoryException(ssefactory.factory);
    
    assert(dcsfactory.factory.property == 10);
    assert(dcrfactory.factory.property == 0);
    assertThrown!InstanceFactoryException(dcefactory.factory);
    
    assert(dssfactory.factory.property == 11);
    assert(dsrfactory.factory.property == 0);
    assertThrown!InstanceFactoryException(dsefactory.factory);
}

unittest {
    ObjectStorage!() storage = new ObjectStorage!();
    auto csfactory = callbackFactory!MockObject(storage, function (Locator!() loc, int i) {
        return new MockObject(i);
    }, cast(int) 10);
    auto crfactory = callbackFactory!MockObject(storage, delegate (Locator!() loc, LocatorReference i) {
        return new MockObject(i.resolve!int(loc));
    }, new LocatorReference("int"));
    auto cefactory = callbackFactory!MockObject(storage, function MockObject(Locator!() loc, int i) {
        throw new Exception("Not going to instantiate");
    }, cast(int) 10);
    
    storage.set(new WrapperImpl!int(20), "int");
    
    assert(csfactory.factory.property == 10);
    assert(crfactory.factory.property == 20);
    assertThrown!InstanceFactoryException(cefactory.factory);
}

unittest {
    ObjectStorage!() storage = new ObjectStorage!();
    MockObject obj = new MockObject;
    MockStruct str = MockStruct();
    auto cscallback = callbackConfigurer!MockObject(storage, function (Locator!() loc, MockObject obj, int i) {
        obj.property = i;
    }, 10);
    
    auto crcallback = callbackConfigurer!MockObject(storage, delegate (Locator!() loc, MockObject obj, LocatorReference i) {
        obj.property = i.resolve!int(loc);
    }, new LocatorReference("int"));
    
    auto cecallback = callbackConfigurer!MockObject(storage, function (Locator!() loc, MockObject obj, LocatorReference i) {
        obj.property = i.resolve!int(loc);
    }, new LocatorReference("unk"));
    
    auto sscallback = callbackConfigurer!MockStruct(storage, function (Locator!() loc, ref MockStruct obj, int i) {
        obj.property = i;
    }, 10);
    
    auto srcallback = callbackConfigurer!MockStruct(storage, delegate (Locator!() loc, ref MockStruct obj, LocatorReference i) {
        obj.property = i.resolve!int(loc);
    }, new LocatorReference("int"));
    
    auto secallback = callbackConfigurer!MockStruct(storage, function (Locator!() loc, ref MockStruct obj, LocatorReference i) {
        obj.property = i.resolve!int(loc);
    }, new LocatorReference("unk"));
    
    storage.set(new WrapperImpl!int(20), "int");
    
    cscallback.configure(obj);
    assert(obj.property == 10);
    crcallback.configure(obj);
    assert(obj.property == 20);
    assertThrown!PropertyConfigurerException(cecallback.configure(obj));
    
    sscallback.configure(str);
    assert(str.property == 10);
    srcallback.configure(str);
    assert(str.property == 20);
    assertThrown!PropertyConfigurerException(secallback.configure(str));
}

unittest {
    GenericFactory!MockObject factory = new GenericFactoryImpl!MockObject(null);
    MockObject obj = new MockObject;
    
    factory.setInstanceFactory(new ValueInstanceFactory!MockObject(obj));
    
    assert(factory.factory() is obj);
}