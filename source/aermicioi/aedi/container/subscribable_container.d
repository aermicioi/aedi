/**
License:
	Boost Software License - Version 1.0 - August 17th, 2003

	Permission is hereby granted, free of charge, to any person or organization
	obtaining a copy of the software and accompanying documentation covered by
	this license (the "Software") to use, reproduce, display, distribute,
	execute, and transmit the Software, and to prepare derivative works of the
	Software, and to permit third-parties to whom the Software is furnished to
	do so, all subject to the following:

	The copyright notices in the Software and this entire statement, including
	the above license grant, this restriction and the following disclaimer,
	must be included in all copies of the Software, in whole or in part, and
	all derivative works of the Software, unless such copies or derivative
	works are solely in the form of machine-executable object code generated by
	a source language processor.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
	SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
	FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
	ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
	DEALINGS IN THE SOFTWARE.

Authors:
	aermicioi
**/
module aermicioi.aedi.container.subscribable_container;

import aermicioi.aedi.container.container;
import aermicioi.aedi.storage.object_storage;
import aermicioi.aedi.storage.decorator;
import aermicioi.aedi.storage.locator : LocatorMixin;
import aermicioi.aedi.storage.alias_aware;
import aermicioi.aedi.storage.storage;
import aermicioi.aedi.factory.factory;
import aermicioi.aedi.exception.not_found_exception;
import aermicioi.aedi.util.traits;
import aermicioi.aedi.util.typecons : Subscribable, SubscribableMixin, Optional, optional;
import std.meta;
import std.traits;

import std.range.interfaces;

/**
Denotes pointcuts at which events for instantiation will be run.
**/
enum ContainerInstantiationEventType
{

    /**
    Event emitted before beggining of instantiation process
    **/
    pre,

    /**
    Event emitted after end of instantiation process
    **/
    post,
}

/**
Denotes pointcuts at which events for termination will be run.
**/
enum ContainerTerminationEventType
{
    /**
    Event emitted before termination of container started.
    **/
    pre,

    /**
    Event emitted after termination of container ended.
    **/
    post
}

/**
Denotes store and removal of component factories.
**/
enum ContainerFactoryEventType
{
    /**
    Event emitted before component is set in decorated container.
    **/
    set,

    /**
    Event emitted after component is removed from decorated container.
    **/
    remove
}

/**
Denotes pointcuts at which element is accessed.
**/
enum ContainerAccessEventType
{
    /**
    Event emitted before component is accessed in decorated container.
    **/
    pre,

    /**
    Event emitted after component is accessed in decorated container.
    **/
    post
}

/**
Denotes pointcuts at which events for checking for component will be run.
**/
enum ContainerCheckEventType
{
    /**
    Event emitted before component is checked in decorated container.
    **/
    pre,

    /**
    Event emitted after component is checked in decorated container.
    **/
    post
}

/**
Decorating container that adds a set of events at different actions during lifetime of a container
to which subscribers can subscribe to. This decorated will
inherit following interfaces only and only if the
T also implements them:
  $(OL
      $(LI Storage!(ObjectFactory, string))
      $(LI Container)
      $(LI AliasAware!string)
  )
Decorated container must implement following interfaces:
    $(OL
        $(LI Container)
        $(LI MutableDecorator!T)
        $(LI Subscribable!ContainerInstantiationEventType)
        $(LI Decorator!Container)
    )

Params:
    T = The decorated that switchable decorated will decorate.
**/
template SubscribableContainer(T)
{

    /**
    Set which the switchable container will decorate for T. By default
    Locator!() and Subscribable!ContainerInstantiationEventType is included.
    **/
    alias InheritanceSet = NoDuplicates!(Filter!(
        templateOr!(
            partialSuffixed!(
                isDerived,
                Storage!(ObjectFactory, string)
            ),
            partialSuffixed!(
                isDerived,
                AliasAware!string
            ),
            partialSuffixed!(
                isDerived,
                FactoryLocator!ObjectFactory
            )
        ),
        InterfacesTuple!T),
        Container,
        Subscribable!(ContainerInstantiationEventType, void delegate () @safe),
        Subscribable!(ContainerInstantiationEventType, void delegate(SubscribableContainer!T container) @safe),
        Subscribable!(ContainerTerminationEventType, void delegate() @safe),
        Subscribable!(ContainerTerminationEventType, void delegate(SubscribableContainer!T container) @safe),
        Subscribable!(ContainerFactoryEventType, void delegate(ObjectFactory factory, string) @safe),
        Subscribable!(ContainerAccessEventType, void delegate (Optional!Object component, Optional!string key) @safe),
        Subscribable!(ContainerCheckEventType, void delegate(Optional!bool existence, Optional!string key) @safe),
        Decorator!Container
    );

    @safe class SubscribableContainer : InheritanceSet
    {
        mixin MutableDecoratorMixin!T;

        mixin SubscribableMixin!(ContainerInstantiationEventType, void delegate() @safe) InstantiationSubscribers;
        mixin SubscribableMixin!(ContainerInstantiationEventType, void delegate(SubscribableContainer!T) @safe) InstantiationSubscribersWithContainerRef;

        mixin SubscribableMixin!(ContainerTerminationEventType, void delegate() @safe) TerminationSubscribers;
        mixin SubscribableMixin!(ContainerTerminationEventType, void delegate (SubscribableContainer!T) @safe) TerminationSubscribersWithContainerRef;

        mixin SubscribableMixin!(ContainerFactoryEventType, void delegate(ObjectFactory factory, string) @safe) FactorySubscribers;

        mixin SubscribableMixin!(ContainerAccessEventType, void delegate (Optional!Object, Optional!string) @safe) ContainerAccessSubscribers;
        mixin SubscribableMixin!(ContainerCheckEventType, void delegate (Optional!bool, Optional!string) @safe) ContainerCheckSubscribers;

        public
        {
            alias subscribe = InstantiationSubscribers.subscribe;
            alias subscribe = InstantiationSubscribersWithContainerRef.subscribe;

            alias subscribe = TerminationSubscribers.subscribe;
            alias subscribe = TerminationSubscribersWithContainerRef.subscribe;

            alias subscribe = FactorySubscribers.subscribe;

            alias subscribe = ContainerAccessSubscribers.subscribe;
            alias subscribe = ContainerCheckSubscribers.subscribe;

            /**
            Sets up the internal state of container.

            Sets up the internal state of container (Ex, for singleton container it will spawn all objects that locator contains).
            **/
            SubscribableContainer instantiate()
            {
                InstantiationSubscribers.invoke(ContainerInstantiationEventType.pre);
                InstantiationSubscribersWithContainerRef.invoke(ContainerInstantiationEventType.pre, this);
                this.decorated.instantiate();
                InstantiationSubscribersWithContainerRef.invoke(ContainerInstantiationEventType.post, this);
                InstantiationSubscribers.invoke(ContainerInstantiationEventType.post);

                return this;
            }

            /**
            Destruct all managed components.

            Destruct all managed components. The method denotes the end of container lifetime, and therefore destruction of all managed components
            by it.
            **/
            Container terminate() {
                TerminationSubscribers.invoke(ContainerTerminationEventType.pre);
                TerminationSubscribersWithContainerRef.invoke(ContainerTerminationEventType.pre, this);
                this.decorated.terminate();
                TerminationSubscribersWithContainerRef.invoke(ContainerTerminationEventType.post, this);
                TerminationSubscribers.invoke(ContainerTerminationEventType.post);

                return this;
            }

            /**
            Get component from decorated container.

            Params:
                key = identity of component
            Returns:
            Object
            **/
            Object get(string key)
            {
                ContainerAccessSubscribers.invoke(ContainerAccessEventType.pre, optional!Object, key.optional);
                Object object = this.decorated.get(key);
                ContainerAccessSubscribers.invoke(ContainerAccessEventType.post, object.optional, key.optional);

                return object;
            }

            /**
            Check if component exists in container.

            Params:
                key = identity of component.
            Returns:
                bool true if it exists.
            **/
            bool has(in string key) inout
            {
                ContainerCheckSubscribers.invoke(ContainerCheckEventType.pre, optional!bool, key[].optional);
                bool result = this.decorated.has(key);
                ContainerCheckSubscribers.invoke(ContainerCheckEventType.post, result.optional, key[].optional);

                return result;
            }

            static if (is(T : Storage!(ObjectFactory, string)))
            {
                /**
                Set component in decorated by identity.

                Params:
                    identity = identity of factory.
                    element = factory that is to be saved in decorated.

                Return:
                    SwitchableContainer!T decorating decorated.
                **/
                typeof(this) set(ObjectFactory element, string identity) {
                    FactorySubscribers.invoke(ContainerFactoryEventType.set, element, identity);
                    this.decorated.set(element, identity);

                    return this;
                }

                /**
                Remove factory from decorated with identity.

                Remove factory from decorated with identity.

                Params:
                    identity = the identity of factory to be removed.

                Return:
                    SwitchableContainer!T decorating decorated
                **/
                typeof(this) remove(string identity) {
                    decorated.remove(identity);

                    FactorySubscribers.invoke(ContainerFactoryEventType.remove, null, identity);
                    return this;
                }
            }

            static if (is(T : AliasAware!string))
            {
                mixin AliasAwareMixin!(typeof(this));
            }

            static if (is(T : FactoryLocator!ObjectFactory))
            {
                mixin FactoryLocatorMixin!(typeof(this));
            }
        }
    }
}
