/**
License:
	Boost Software License - Version 1.0 - August 17th, 2003

	Permission is hereby granted, free of charge, to any person or organization
	obtaining a copy of the software and accompanying documentation covered by
	this license (the "Software") to use, reproduce, display, distribute,
	execute, and transmit the Software, and to prepare derivative works of the
	Software, and to permit third-parties to whom the Software is furnished to
	do so, all subject to the following:
	
	The copyright notices in the Software and this entire statement, including
	the above license grant, this restriction and the following disclaimer,
	must be included in all copies of the Software, in whole or in part, and
	all derivative works of the Software, unless such copies or derivative
	works are solely in the form of machine-executable object code generated by
	a source language processor.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
	SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
	FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
	ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
	DEALINGS IN THE SOFTWARE.

Authors:
	aermicioi
**/
module aermicioi.aedi.container.switchable_container;

import aermicioi.aedi.container.container;
import aermicioi.aedi.storage.storage;
import aermicioi.aedi.storage.locator;
import aermicioi.aedi.factory.factory;
import aermicioi.aedi.exception.not_found_exception;
import aermicioi.aedi.storage.alias_aware;

/**
Interface that allows object to be switchable in off and on state.
**/
interface Switchable {
    
    public @property {
    	
    	/**
    	Get the state of object.
    	
    	Get the state of object. Whether is enabled or not.
    	
    	Returns:
        	bool true if enabled or false if not.
    	**/
    	inout(bool) enabled() @safe nothrow pure inout;
    	
    	/**
    	Set the state of object.
    	
    	Set the state of object. Whether is enabled or not.
    	
    	Params:
        	enable = true to enable, false to disable.
    	**/
    	Switchable enabled(bool enable) @safe nothrow pure;
    }
}

/**
Templated switchable container.

Templated switchable container. This container will
decorate another container, and add switching logic 
to it. Depending in which state (on/off) the switching 
container is. It will instantiate if the container is on, 
and not if container is in off mode. This container will
inherit following interfaces only and only if the 
T also implements them:
    $(OL
        $(LI Storage!(Factory, string))
        $(LI Container)
        $(LI AliasAware!string)
    )

Params:
    T = The container that switchable container will decorate.
   
**/
template SwitchableContainer(T) {
    import std.meta;
    import std.traits;
    import aermicioi.util.traits;
    
    /**
    Set which the switchable container will decorate for T. By default
    Locator!() and Switchable is included.
    **/
    alias InheritanceSet = AliasSeq!(Filter!(
        templateOr!(
            partialSuffixed!(
                isDerived,
                Storage!(Factory, string)
            ),
            partialSuffixed!(
                isDerived,
                Container
            ),
            partialSuffixed!(
                isDerived,
                AliasAware!string
            )
        ),
        InterfacesTuple!T),
        Locator!(),
        Switchable
    );
    
    /**
    Templated switchable container.
    **/
    class SwitchableContainer : InheritanceSet {
        private {
            T container_;
            
            bool enabled_;
        }
        
        public {
            
            /**
        	Set the state of container.
        	
        	Set the state of container. Whether is enabled or disabled.
        	
        	Params:
            	enable = true to enable, false to disable.
        	**/
            SwitchableContainer!T enabled(bool enabled) @safe nothrow pure {
            	this.enabled_ = enabled;
            	
            	return this;
            }
            
            /**
        	Get the state of container (enabled/disabled).
        	
        	Get the state of container (enabled/disabled).
        	
        	Returns:
            	bool true if enabled or false if not.
        	**/
            inout(bool) enabled() @safe nothrow pure inout {
            	return this.enabled_;
            }
            
            /**
            Set the decorated container
            
            Params:
                container = container to be decorated
                
            Returns:
                SwitchableContainer!T decorating container.
            **/
            SwitchableContainer!T container(T container) @safe nothrow pure {
            	this.container_ = container;
            
            	return this;
            }
            
            
            /**
            Get the decorated container.
            
            Get the decorated container.
            
            Returns:
            	inout(T) decorated container
            **/
            inout(T) container() @safe nothrow pure inout {
            	return this.container_;
            }
            
            static if (is(T : Container)) {
                
                /**
                Prepare container to be used.
                
                Prepare container to be used.

                Returns:
                	SwitchableContainer!T decorating container
                **/
                SwitchableContainer!T instantiate() {
                    if (enabled) {
                        container.instantiate();
                    }
                    
                    return this;
                }
            }
            
            static if (is(T : Storage!(Factory, string))) {
                /**
        		Set factory in container by identity.
        		
        		Params:
        			identity = identity of factory.
        			element = factory that is to be saved in container.
        			
        		Return:
        			SwitchableContainer!T decorating container.
        		**/
                SwitchableContainer!T set(string identity, Factory element) {
                    container.set(identity, element);
                    
                    return this;
                }
                
                /**
                Remove factory from container with identity.
                
                Remove factory from container with identity. 
                
                Params:
                	identity = the identity of factory to be removed.
                	
            	Return:
            		SwitchableContainer!T decorating container
                **/
                SwitchableContainer!T remove(string identity) {
                    container.remove(identity);
                    
                    return this;
                }
            }
            
            static if (is(T : AliasAware!string)) {
                /**
                Alias identity to an alias_.
                        
                Params:
                	identity = originial identity which is to be aliased.
                	alias_ = alias of identity.
                	
        		Returns:
        			SwitchableContainer!T decorating container
                **/
                SwitchableContainer!T link(string identity, string alias_) {
                    container.link(identity, alias_);
                    
                    return this;
                }
                
                /**
                Removes alias.
                
                Params:
                	alias_ = alias to remove.
        
                Returns:
                    SwitchableContainer!T decorating container
                **/
                SwitchableContainer!T unlink(string alias_) {
                    container.unlink(alias_);
                    
                    return this;
                }
                
                /**
                Resolve an alias to original identity, if possible.
                
                Params:
                	alias_ = alias of original identity
                
                Returns:
                	const(string) the last identity in alias chain if container is enabled, or alias_ when not.
                
                **/
                const(string) resolve(string alias_) const {
                    if (enabled) {
                        return container.resolve(alias_);
                    }
                    
                    return alias_;
                }
            }
            
            /**
    		Get object that is associated with identity.
    		
    		Params:
    			identity = the object identity.
    			
    		Throws:
    			NotFoundException in case if the object wasn't found or container is not enabled.
    		
    		Returns:
    			Object if it is available.
    		**/
            Object get(string identity) {
                if (enabled) {
                    return container.get(identity);
                }
                
                throw new NotFoundException("Object with id " ~ identity ~ " not found.");
            }
            
            /**
            Check if object is present in SwitchableContainer!T by key identity.
            
            Note:
            	This check should be done for elements that locator actually contains, and
            	not in chained locator (when locator is also a DelegatingLocator) for example.
            Params:
            	identity = identity of object.
            	
        	Returns:
        		bool true if container is enabled and has object by identity.
            **/
            bool has(string identity) inout {
                return enabled && container.has(identity);
            }
        }
    }
}
